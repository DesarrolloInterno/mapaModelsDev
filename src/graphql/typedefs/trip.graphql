type tripsForCrossings {
  id:ID
  numTrip: Int
  idClient: Int
  client: String
  idOrigin: Int
  Origin: String
  idDestination: Int
  Destination: String
  deliveryDate: String
  loadingDate: String
  idEmployee: Int
  Employee: String
  nickname: String
  idTruckBox: Int
  truckBox: String
  idUnit: Int
  unit: String
  status: String
  tripType: String
}

type instructionLetter {
  id: ID
  dateRecorded: String
  idClient: String
  client: String
  clientShortName: String
  RFC: String
  idDestination: String
  destination: String
  fullAddressDestination: String
  legendDestinationCollection: String
  temperature: String
  temperatureCelsius: String
  status: String
  loadingDate: String
  deliveryDate: String
  wheelChocks: String
  straps: String
  containers: String
  countryDestination: String
  idTrip: String
  numTrip: String
  idOperator: String
  operator: String
  idUnit: String
  unit: String
  idTruckBox: String
  truckBox: String
  orderDate: String
  idEnterprise: String
}

type suppliersLetter {
  id: ID,
  idEnterprise: Int,
  enterprise: String,
  town: String,
  state: String,
  isRefrigerated: Int,
  economicNumber: String,
  fullDateName: String,
  stateCode: String
}

type cleaningLetter {
  id: ID,
  idEnterprise: Int,
  idTruckBox: Int,
  loadingDate: String,
  numTrip: String,
  sealNumber: String,
  licensePlates: String,
  truckBox: String,
  unitType: String,
  idLine: Int,
  line: String,
  enterprise: String
}

type fumigationLetter {
  id: ID,
  idEnterprise: Int,
  enterprise: String,
  address: String,
  neighborhood: String,
  town: String,
  state: String,
  zipCode: String,
  phone: String,
  RFC: String,
  reference: String,
  numTrip: String,
  loadingDate: String,
  truckBox: String,
  nextServiceDate: String
}

type tripBoothRoute {
  id: ID
  name: String
  status: String
  idTrip: String
}

type tripSafetyEquipment {
  id: ID
  name: String
  status: String
  idTrip: String
  description: String
}

type transportDocument {
  id: ID
  dateRecorded: String
  numTrip: String
  proNumber: String
  kilometres: String
  loadingDate: String
  deliveryDate: String
  tripType: String
  grossWeights: String
  client: String
  idClient: String
  clientShortName: String
  RFC: String
  clientFullAddress: String
  reference: String
  clientRFC: String
  clientTAXID: String
  origin: String
  originRFC: String
  originTAXID: String
  originFullAddress: String
  destination: String
  destinationRFC: String
  destinationTAXID: String
  destinationFullAddress: String
  unit: String
  licensePlatesUnit: String
  insurer: String
  insurancePolicy: String
  carrierKey: String
  permissionType: String
  permissionNumber: String
  truckBox: String
  trailerTypes: String
  licensePlatesTruckBox: String
  stateTruckBox: String
  operator: String
  driverLicense: String
  operatorRFC: String
  countryOperator: String
  subtotal: String
  IVA: String
  RET: String
  total: String
  IVApercentage: String
  RETpercentage: String
  observations: String
  customsClearance: String
  idEnterprise: String
  UUID: String
  SATcertificateNumber: String
  dateCFDI: String
  originalChain: String
  CFDIstamp: String
  SATStamp: String
  LinkQR: String
  idCCP: String
}

type tripAmounts {
  id: ID
  quantity: String
  codeMeasuringUnit: String
  measuringUnit: String
  invoicingConcept: String
  codeInvoicingConcept: String
  subtotal: String
  IVA: String
  RET: String
  IVApercentage: String
  RETpercentage: String
  totalAmount: String
}

type trips {
  id: ID,
  idClient: Int,
  client: String,
  clientShortName: String,
  RFC: String,
  TAXID: String,
  idOrigin: Int,
  origin: String,
  fullAddressOrigin: String,
  legendOriginCollection: String,
  idDestination: Int,
  destination: String,
  fullAddressDestination: String,
  legendDestinationCollection: String,
  travelClassification: String,
  kilometres: String,
  travelTime: String,
  temperature: String,
  tripType: String,
  currency: String,
  taxes: String,
  isCrossing: String,
  idSalesFormatCrossing: Int,
  salesFormatCrossing: String,
  operatorComments: String,
  operationComments: String,
  observations: String,
  status: String,
  productDescription: String,
  crossingType: String,
  tripTypeName: String,
  americanPortion: String,
  crossingPortion: String,
  mexicanPortion: String,
  loadingDate: String,
  orderDate: String,
  deliveryDate: String,
  sealNumber: String,
  proNumber: String,
  wheelChocks: String,
  straps: String,
  reference: String,
  orderPriority: String,
  idSalesFormat: Int,
  saleFormat: String,
  containers: String,
  shippingLines: String,
  numTripOrder: String,
  customsClearance: String,
  countryOrigin: String,
  countryDestination: String,
  typeCrossing: String,
  idTripOrigin: Int,
  numTripOrigin: String,
  numTrip: String,
  idOperator: Int,
  operator: String,
  idUnit: Int,
  unit: String,
  idTruckBox: Int,
  truckBox: String,
  idTripOrder: Int,
  total: Float,
  loadingDateTime: String
}

input update_trip_tripAssignment{
  idTripOrder : String,
	idUnit: String,
	idEmployee: String,
	idTruckBox: String,
	userLoggedIn: String
}

input update_trip{
  idTrip: String,
	name: String,
	idClient: String,
	idOrigin: String,
	idDestination: String,
	legendOriginCollection: String,
	legendDestinationCollection: String,
	kilometres: String,
	temperature: String,
	tripType: String,
	observations: String,
	fullAddressOrigin: String,
	fullAddressDestination: String,
	americanPortion: String,
	crossingPortion: String,
	mexicanPortion: String,
	currency: String,
	loadingDate: String,
	deliveryDate: String,
	sealNumber: String,
	proNumber: String,
	wheelChocks: String,
	straps: String,
	reference: String,
	idSalesFormat: String,
	customsClearance: String,
	countryOrigin: String,
	countryDestination: String,
	numTrip: String,
	idEmployee: String,
	idTruckBox: String,
	idUnit: String,
	userLoggedIn: String
}

type return_new_trip{
  idTripOrder: String
  message: String
}

type return_newTrip{
  message: String,
  idTrip: String
}

type return_update_trip{
  idTrip: String
  message: String
}

input update_tripBoothRoute {
  idTripBoothRoute: String
  idSalesFormat: String
  idBoothRoute: String
  type: String
  routeOrder: String
  userLoggedIn: String
  status: String
  isReversible: String
  idTrip: String
}

input update_tripAmounts {
  idTripAmounts: String
  idInvoicingConcept: String
  invoicingConcept: String
  subtotal: String
  idIVApercentage: String
  IVApercentage: String
  IVA: String
  idRETpercentage: String
  RETpercentage: String
  RET: String
  totalAmount: String
  idSalesFormat: String
  codeMeasuringUnit: String
  measuringUnit: String
  userLoggedIn: String
  status: String
  idTrip : String
  taxRate: String
}

type tripBoothRoute {
  id: ID
  idBoothRoute: Int
  name: String
  routeOrder: String
  origin: String
  destination: String
  type: String
  idSalesFormat: Int
  status: String
  isReversible: String
}

type tripAmounts {
  id: ID
  idSalesFormat: Int
  idInvoicingConcept: Int
  invoicingConcept: String
  subtotal: String
  idIVApercentage : Int
  IVApercentage: String
  IVA: String
  idRETpercentage: Int
  RETpercentage: String
  RET: String
  totalAmount: String
  taxRate: String
  measuringUnit: String
  codeMeasuringUnit: String
  status: String
}

input delete_tripAmounts{
  idTripAmounts: String,
  userLoggedIn: String,
  idTrip: String
}

input delete_tripBoothRoute{
  idTripBoothRoute: String,
  userLoggedIn: String,
  idTrip: String
}

input create_trip{
name: String,
idClient: String,
idOrigin: String,
idDestination: String,
legendOriginCollection: String,
legendDestinationCollection: String,
travelClassification: String,
kilometres: String,
travelTime: String,
temperature: String,
tripType: String,
observations: String,
fullAddressOrigin: String,
fullAddressDestination: String,
americanPortion: String,
crossingPortion: String,
mexicanPortion: String,
currency: String,
loadingDate: String,
deliveryDate: String,
sealNumber: String,
proNumber: String,
wheelChocks: String,
straps: String,
reference: String,
idSalesFormat: String,
customsClearance: String,
countryOrigin: String,
countryDestination: String,
idEmployee: String,
idTruckBox: String,
idUnit: String,
taxes: String,
isRefrigerated: String,
typeCrossing: String,
userLoggedIn: String,
idLoggedIn: String
}

type tripsForTracking {
  id: ID,
  idClient: Int,
  client: String,
  clientShortName: String,
  RFC: String,
  TAXID: String,
  idOrigin: Int,
  origin: String,
  fullAddressOrigin: String,
  legendOriginCollection: String,
  idDestination: Int,
  destination: String,
  fullAddressDestination: String,
  legendDestinationCollection: String,
  travelClassification: String,
  kilometres: String,
  travelTime: String,
  temperature: String,
  tripType: String,
  currency: String,
  taxes: String,
  isCrossing: String,
  idSalesFormatCrossing: Int,
  salesFormatCrossing: String,
  operatorComments: String,
  operationComments: String,
  observations: String,
  status: String,
  productDescription: String,
  crossingType: String,
  tripTypeName: String,
  americanPortion: String,
  crossingPortion: String,
  mexicanPortion: String,
  loadingDate: String,
  orderDate: String,
  deliveryDate: String,
  sealNumber: String,
  proNumber: String,
  wheelChocks: String,
  straps: String,
  reference: String,
  orderPriority: String,
  idSalesFormat: Int,
  saleFormat: String,
  containers: String,
  shippingLines: String,
  numTripOrder: String,
  customsClearance: String,
  countryOrigin: String,
  countryDestination: String,
  typeCrossing: String,
  idTripOrigin: Int,
  numTripOrigin: String,
  numTrip: String,
  idOperator: Int,
  operator: String,
  idUnit: Int,
  unit: String,
  idTruckBox: Int,
  truckBox: String,
  idTripOrder: Int,
  total: Float,
  loadingDateTime: String,
  inGateDate: String,
  documentDeliveryDate: String,
  startTripDate: String,
  departureDate: String,
  deliveryDateTime: String
  currentTemperature: String,
  isRefrigerated: Int,
  placementDate: String,
  arrivalDate: String
}

type tripTracking_observations {
  id: ID
  idTrip: String
  numTrip: String
  dateObservations: String
  observations: String
  userLoggedIn: String
}

input new_tripTracking_observations {
  idTrip: String
  observations: String
  userLoggedIn: String
}

input update_tripTracking_observations {
  idTripTrackingObservations: String
  observations: String
  userLoggedIn: String
}

input delete_tripTracking_observations {
  idTripTrackingObservations: String
  userLoggedIn: String
}

type return_new_tripTracking_observations {
  idTripTrackingObservations: String
  message: String
}

type return_observations_message {
  message: String
}

input update_trip_observations {
  idTrip: String,
  observations: String,
  userLoggedIn: String
}

input set_tripDocument {
  idTrip: String,
  userLoggedIn: String,
  comments: String
}

type new_Document_trip {
  idDocument: String
}

input set_link_tripDocument {
  idDocument: String,
  link: String,
  document: String,
  userLoggedIn: String
}

type tripDocuments {
    id: ID
    idTrip: Int
    nameDocument: String
    documentLink: String
    status: String
    comments: String
}

input update_tripDocuments {
  idTripDocument: String,
  idTrip: String,
  documentLink: String,
  nameDocument: String,
  userLoggedIn: String,
  comments: String
}

input update_tripTracking_dynamic {
  idTrip: String,
  loadingDate: String,
  orderDate: String,
  inGateDate: String,
  documentDeliveryDate: String,
  startTripDate: String,
  deliveryDate: String,
  departureDate: String,
  observations: String,
  userLoggedIn: String
}

type tripTrackingPickups {
  id:ID
  idClientLocation: Int
  clientLocation: String
  fullAddress: String
  idTripOrder: Int
  idTrip: Int
  idRowProduct: Int
  kilometres: String
  productQuantity: String
  productWeight: String
  measuringUnit: String
  appointmentDate: String
  status: String
  typeLoad: String
  arrivalDate: String
  productName: String
}

type return_tem_products_trip_excel{
	productNameMessage: String
  productName: String
	productCodeMessage: String
  productCode: String
	codeUnitMessage: String
  codeUnit: String
	cargoQuantityMessage: String
  cargoQuantity: String
	cargoWeightMessage: String
  cargoWeight: String
	weightUnitMessage: String
  weightUnit: String
  hazardousMaterial: String
	codeHazardousMaterialMessage: String
  codeHazardousMaterial: String
	codePackagingMessage: String
  codePackaging: String
	declarationNumberMessage: String
  declarationNumberPart1: String
  declarationNumberPart2: String
  declarationNumberPart3: String
  declarationNumberPart4: String
  declarationNumber: String
	tariffCodeMessage: String
  tariffCode: String
	foeringTradeUUIDMessage: String
  foeringTradeUUID: String
	documentTypeCodeMessage: String
  documentTypeCode: String
	materialTypeCodeMessage: String
  materialTypeCode: String
	materialDescriptionMessage: String
  materialDescription: String
	cofeprisSectorMessage: String
  cofeprisSector: String
	rfcImporterMessage: String
  rfcImporter: String
	activeIngredientNameMessage: String
  activeIngredientName: String
	chemicalNameMessage: String
  chemicalName: String
	genericProductNameMessage: String
  genericProductName: String
	distinctiveProductNameMessage: String
  distinctiveProductName: String
	companyNameMakerMessage: String
  companyNameMaker: String
	expirationDateMessage: String
  expirationDate: String
	medicationPackageMessage: String
  medicationPackage: String
	pharmaceuticalFormMessage: String
  pharmaceuticalForm: String
	specialConditionsTransportMessage: String
  specialConditionsTransport: String
	healthRegistryAuthorizationFolioMessage: String
  healthRegistryAuthorizationFolio: String
	importPermitFolioMessage: String
  importPermitFolio: String
	vucemImportFolioMessage: String
  vucemImportFolio: String
	chemicalAbstractsServiceNumberMessage: String
  chemicalAbstractsServiceNumber: String
	importCompanyNameMessage: String
  importCompanyName: String
	healthRegistrationNumberPesticidesFertilizersMessage: String
  healthRegistrationNumberPesticidesFertilizers: String
	manufacturerInformationMessage: String
  manufacturerInformation: String
	formulatorDataMessage: String
  formulatorData: String
	maquiladoraDataMessage: String
  maquiladoraData: String
	authorizedUseMessage: String
  authorizedUse: String
	customsClearanceMessage: String
  customsClearance: String
	customsDocumentIdentifierMessage: String
  customsDocumentIdentifier: String
  excelRow: String
}

input new_tripTracking_Pickups {
  idClientLocation: String,
  idTrip: String,
  idRowProduct: String,
  kilometres: String,
  productQuantity: String,
  productWeight: String,
  measuringUnit: String,
  appointmentDate: String,
  typeLoad: String,
  userLoggedIn: String,
  arrivalDate: String
}

input update_tripTracking_Pickups {
  idTripTravelPickup: String,
  appointmentDate: String,
  arrivalDate: String,
  userLoggedIn: String
}

input tripTotalWeight {
  idTrip: String
  userLoggedIn: String
}

input tem_products_trip_excel {
	idSalesFormat: String
	productName: String
	productNameMessage: String
	productCode: String
	productCodeMessage: String
	codeUnit: String
	codeUnitMessage: String
	cargoQuantity: String
	cargoQuantityMessage: String
	cargoWeight: String
	cargoWeightMessage: String
	weightUnit: String
	hazardousMaterial: String
	codeHazardousMaterial: String
	codeHazardousMaterialMessage: String
	codePackaging: String
	codePackagingMessage: String
	declarationNumber: String
	declarationNumberMessage: String
	tariffCode: String
	tariffCodeMessage: String
	foeringTradeUUID: String
	foeringTradeUUIDMessage: String
	userLoggedIn: String
	documentTypeCode: String
	documentTypeCodeMessage: String
	materialTypeCode: String
	materialTypeCodeMessage: String
	materialDescription: String
	materialDescriptionMessage: String
	rfcImporter: String
	rfcImporterMessage: String
	cofeprisSector: String
	cofeprisSectorMessage: String
	activeIngredientName: String
	activeIngredientNameMessage: String
	chemicalName: String
	chemicalNameMessage: String
	genericProductName: String
	genericProductNameMessage: String
	distinctiveProductName: String
	distinctiveProductNameMessage: String
	companyNameMaker: String
	companyNameMakerMessage: String
	expirationDate: String
	expirationDateMessage: String
	medicationPackage: String
	medicationPackageMessage: String
	pharmaceuticalForm: String
	pharmaceuticalFormMessage: String
	specialConditionsTransport: String
	specialConditionsTransportMessage: String
	healthRegistryAuthorizationFolio: String
	healthRegistryAuthorizationFolioMessage: String
	importPermitFolio: String
	importPermitFolioMessage: String
	vucemImportFolio: String
	vucemImportFolioMessage: String
	chemicalAbstractsServiceNumber: String
	chemicalAbstractsServiceNumberMessage: String
	importCompanyName: String
	importCompanyNameMessage: String
	healthRegistrationNumberPesticidesFertilizers: String
	healthRegistrationNumberPesticidesFertilizersMessage: String
	manufacturerInformation: String
	manufacturerInformationMessage: String
	formulatorData: String
	formulatorDataMessage: String
	maquiladoraData: String
	maquiladoraDataMessage: String
	authorizedUse: String
	authorizedUseMessage: String
	excelRow: String
	customsClearance: String
	customsClearanceMessage: String
	customsDocumentIdentifier: String
	customsDocumentIdentifierMessage: String
}

type Query {
  GET_ALL_TRIPFORCROSSING(date1: String!, date2: String!): [tripsForCrossings]
  GET_ALL_TRIPS(status: String!, date1: String!, date2: String!): [trips]
  GET_ALL_TRIP_BY_ID_TRIP(idTrip: String!): [trips]
  GET_INSTRUCTION_LETTER_BY_IDTRIP(idTrip: String!): [instructionLetter]
  GET_BOOTHROUTE_BY_IDTRIP(idTrip: String!): [tripBoothRoute]
  GET_TRIPSAFETYEQUIPMENT_BY_IDTRIP(idTrip: String!): [tripSafetyEquipment]
  GET_TRANSPORTDOCUMENT(idTrip: String!): [transportDocument]
  GET_TRIPAMOUNTS(idTrip: String!): [tripAmounts]
  GET_TRIPBOOTHROUTE_BY_IDTRIP(idTrip: String!): [tripBoothRoute]
  GET_TRIPAMOUNTS_BY_IDTRIP(idTrip: String!): [tripAmounts]
  GET_ALL_TRIPS_FOR_TRIPS_TRACKING(status: String!, date1: String!, date2: String!): [tripsForTracking]
  GET_ALL_TRIPTRACKING_OBSERVATIONS(idTrip: String!): [tripTracking_observations]
  GET_ALL_TRIPTRACKING_DOCUMENTS_BY_ID_TRIP(idTrip: String!): [tripDocuments]
  GET_TRIP_TRACKING_PICKUPS(idTrip:String!): [tripTrackingPickups]
  GET_ALL_CROSSING_TRIP_TRACKING(status: String!, date1: String!, date2: String!): [tripsForTracking]
  GET_SUPPLIERS_LETTER_BY_IDTRIP(idTrip: String!): [suppliersLetter]
  GET_CLEANING_LETTER_BY_IDTRIP(idTrip: String!): [cleaningLetter]
  GET_FUMIGATION_LETTER_BY_IDTRIP(idTrip: String!): [fumigationLetter]
}

type Mutation {
  CREATE_TRIP_FROM_TRIPS(input: create_trip): [return_newTrip]
  UPDATE_TRIP_TRIPASSIGNMENT(input: update_trip_tripAssignment): [return_new_trip]
  UPDATE_TRIP(input: update_trip): [return_update_trip]
  UPDATE_TRIP_BOOTHROUTE(input: update_tripBoothRoute): String
  UPDATE_TRIP_AMOUNTS(input: update_tripAmounts): String
  DELETE_TRIP_AMOUNTS(input: delete_tripAmounts): String
  DELETE_TRIP_BOOTHROUTE(input: delete_tripBoothRoute): String
  CREATE_TRIPTRACKING_OBSERVATIONS(input: new_tripTracking_observations): [return_new_tripTracking_observations]
  UPDATE_TRIPTRACKING_OBSERVATIONS(input: update_tripTracking_observations): [return_observations_message]
  DELETE_TRIPTRACKING_OBSERVATIONS(input: delete_tripTracking_observations): [return_observations_message]
  UPDATE_TRIP_OBSERVATIONS(input: update_trip_observations): String
  SET_TRIP_DOCUMENT(input: set_tripDocument): [new_Document_trip]
  SET_LINK_TRIP_DOCUMENT(input: set_link_tripDocument): String
  UPDATE_TRIP_DOCUMENT(input: update_tripDocuments): String
  UPDATE_TRIP_TRACKING_DYNAMIC(input: update_tripTracking_dynamic): String
  CREATE_TRIP_TRACKING_TRAVEL_PICKUPS(input: new_tripTracking_Pickups): String
  UPDATE_TRIP_TRACKING_TRAVEL_PICKUPS(input: update_tripTracking_Pickups): String
  UPDATE_TOTALWEIGHT_TRIP(input: tripTotalWeight): String
  UPLOAD_TEM_PRODUCTS_TRIP(input: tem_products_trip_excel): [return_tem_products_trip_excel]
}