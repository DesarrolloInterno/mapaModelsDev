type travelAssignment {
  id:ID
  idClient: Int
  client: String
  clientShortName: String
  RFC: String
  idOrigin: Int
  origin: String
  fullAddressOrigin: String
  legendOriginCollection: String
  idDestination: Int
  destination: String
  fullAddressDestination: String
  legendDestinationCollection: String
  originDestination: String
  travelClassification: String
  kilometres: String
  travelTime: String
  temperature: String
  tripType: String
  currency: String
  taxes: String
  isRefrigerated: Int
  isDry: Int
  isDoorDoor: Int
  isCrossing: Int
  isEmpty: Int
  isEmptyPaid: Int
  requestProofDelivery: Int
  idSalesFormatCrossing: Int
  salesFormatCrossing: String
  operatorComments: String
  operationComments: String
  observations: String
  status: String
  productDescription: String
  crossingType: String
  tripTypeName: String
  americanPortion: String
  crossingPortion: String
  mexicanPortion: String
  loadingDate: String
  deliveryDate: String
  sealNumber: String
  proNumber: String
  wheelChocks: String
  straps: String
  reference: String
  orderPriority: Int
  idSalesFormat: Int
  saleFormat: String
  containers: String
  shippingLines: String
  numTripOrder: Int
  customsClearance: String
  typeCrossing: String
  idTripOrigin: Int
  numTripOrigin: String
  countryOrigin: String
  countryDestination: String
  orderDate: String
  subtotal: String
  total: String
  IVA: String
  RET: String
  idTrip: Int
  numTrip: String
  idOperator: Int
  operator: String
  idUnit: Int
  unit: String
  idTruckBox: Int
  truckBox: String
  UUID: String
  docPdf: String
}

type travelAssignmentTrip {
  id:ID
  idClient: Int
  client: String
  clientShortName: String
  RFC: String
  idOrigin: Int
  origin: String
  fullAddressOrigin: String
  legendOriginCollection: String
  idDestination: Int
  destination: String
  fullAddressDestination: String
  legendDestinationCollection: String
  originDestination: String
  travelClassification: String
  kilometres: String
  travelTime: String
  temperature: String
  tripType: String
  currency: String
  taxes: String
  isRefrigerated: Int
  isDry: Int
  isDoorDoor: Int
  isCrossing: Int
  isEmpty: Int
  isEmptyPaid: Int
  requestProofDelivery: Int
  idSalesFormatCrossing: Int
  salesFormatCrossing: String
  operatorComments: String
  operationComments: String
  observations: String
  status: String
  productDescription: String
  crossingType: String
  tripTypeName: String
  americanPortion: String
  crossingPortion: String
  mexicanPortion: String
  loadingDate: String
  deliveryDate: String
  sealNumber: String
  proNumber: String
  wheelChocks: String
  straps: String
  reference: String
  orderPriority: Int
  idSalesFormat: Int
  saleFormat: String
  containers: String
  shippingLines: String
  numTripOrder: Int
  customsClearance: String
  typeCrossing: String
  idTripOrigin: Int
  numTripOrigin: String
  countryOrigin: String
  countryDestination: String
  orderDate: String
  subtotal: String
  total: String
  IVA: String
  RET: String
  idTrip: Int
  numTrip: String
  idOperator: Int
  operator: String
  idUnit: Int
  unit: String
  idTruckBox: Int
  truckBox: String
  idTripOrder: Int 
  UUID: String
  docPdf: String
  idInvoice: String
  numInvoice: String
}

type responseCreateTrip {
  message: String
  messageproducts: String
  messageClient: String
  messageSalesFormat: String
  messageLoadingDate: String
  messageDeliveryDate: String
  messageTemperature: String
  messageProNumber: String
  messageReference: String
  messageSalesFormatCrossing: String
  messageUnit: String
  messageTruckBox: String
  messageOperator: String
  messagePreReceiptMovement: String
	idPreReceiptMovement: String
  idTrip: String
}

type tripSafetyEquipment {
  id:ID
  idTripOrder: String
  idSalesFormat: String
  name: String
  description: String
  status: String
  numTripOrder: Int
  idTrip: String
}

type customsClearanceMessageTrip {
  customsClearanceMessage: String
}

type Query {
  GET_ALL_TRAVEL_ASSIGNMENT(typeFilter:String!, date: String!, date1: String!, date2: String!, tripFilter: String!, dateTypeFilter: String!, idEnterprise: String!): [travelAssignment]
  GET_ALL_TRAVEL_ASSIGNMENT_CROSSING(typeFilter: String!, date: String!, date1: String!, date2: String!, tripFilter: String!, dateTypeFilter: String!, idEnterprise: String!): [travelAssignment]
  GET_ALL_TRAVEL_ASSIGNMENT_TRIP(typeFilter: String!, date: String!, date1: String!, date2: String!, dateTypeFilter: String!, idEnterpriseLoggedIn: String!): [travelAssignmentTrip]
  GET_ALL_TRAVEL_ASSIGNMENT_TRIP_CROSSING(typeFilter:String!, date: String!, date1: String!, date2: String!, dateTypeFilter: String!, idEnterprise: String!): [travelAssignmentTrip]
  GET_SAFETY_EQUIPMENT_TRIP(idTrip: String!): [tripSafetyEquipment]
  GET_ALL_TRIP_PRODUCTS_BY_IDTRIP(idTrip: String!): [tripProducts]
}

input travelAssignment_unit {
  idTripOrder: String
  idUnit: String
  userLoggedIn: String
}

input travelAssignment_unit_trip {
  idTrip: String
  idUnit: String
  userLoggedIn: String
}

input travelAssignment_truckBox {
  idTripOrder: String
  idTruckBox: String
  userLoggedIn: String
}

input travelAssignment_truckBox_trip {
  idTrip: String
  idTruckBox: String
  userLoggedIn: String
}

input travelAssignment_operator {
  idTripOrder: String
  idOperator: String
  userLoggedIn: String
}

input travelAssignment_operator_trip {
  idTrip: String
  idOperator: String
  userLoggedIn: String
}

input create_trip_from_order {
  idTripOrder: String
  userLoggedIn: String
}

input orderPriorityTrip {
  idTrip: String,
  orderPriority: String,
  userLoggedIn: String
}

input set_client_trip {
  idClient: String,
  idTrip: String,
  userLoggedIn: String
}

input set_salesFormat_trip {
  idSalesFormat: String,
  idTrip: String,
  userLoggedIn: String
}

input update_trip_mooringGear {
  idTrip: String,
  wheelChocks: String,
  straps: String,
  userLoggedIn: String
}

input update_trip_SalesFormatCrossing {
  idTrip: String,
  idSalesFormatCrossing: String,
  userLoggedIn: String
}

input update_customsClearance_trip {
  idTrip: String
  customsClearance: String
  userLoggedIn: String
  customsClearanceMessage: String
}


input delete_trip_product {
  idTripProduct: String,
  userLoggedIn: String
}

input delete_trip {
  idTrip: String,
  userLoggedIn: String
}

input update_dynamic_trip {
  idTrip: String,
  loadingDate: String,
  deliveryDate: String,
  sealNumber: String,
  temperature: String,
  proNumber: String,
  reference: String,
  isCrossing: String,
  idSalesFormatCrossing: String,
  containers: String,
  shippingLines: String,
  userLoggedIn: String
}

input update_travelAssignment_trip_tripCrossing {
  idTrip: String,
  idTripCrossing: String,
  numTripOrigin: String,
  userLoggedIn: String
}

type Mutation {
  UPDATE_TRAVEL_ASSIGNMENT_UNIT(input: travelAssignment_unit): String
  UPDATE_TRAVEL_ASSIGNMENT_UNIT_TRIP(input: travelAssignment_unit_trip): String
  UPDATE_TRAVEL_ASSIGNMENT_TRUCKBOX(input: travelAssignment_truckBox): String
  UPDATE_TRAVEL_ASSIGNMENT_TRUCKBOX_TRIP(input: travelAssignment_truckBox_trip): String
  UPDATE_TRAVER_ASSIGNMENT_OPERATOR(input: travelAssignment_operator): String
  UPDATE_TRAVER_ASSIGNMENT_OPERATOR_TRIP(input: travelAssignment_operator_trip): String
  CREATE_TRIP(input: create_trip_from_order): [responseCreateTrip]
  UPDATE_ORDER_PRIORITY_TRIP(input: orderPriorityTrip): String
  SET_CLIENT_TRIP(input: set_client_trip): String
  SET_SALEFORMAT_TRIP(input: set_salesFormat_trip): String
  UPDATE_TRIP_MOORINGGEAR(input: update_trip_mooringGear): String
  UPDATE_TRIP_SALESFORMATCROSSING(input: update_trip_SalesFormatCrossing): String
  UPDATE_TRIP_CUSTOMSCLEARNCE(input: update_customsClearance_trip): [customsClearanceMessageTrip]
  DELETE_TRIP_PRODUCT(input: delete_trip_product): String
  DELETE_TRIP(input: delete_trip): String
  UPDATE_DYNAMIC_TRIP(input: update_dynamic_trip): String
  UPDATE_TRAVEL_ASSIGNMENT_TRIP_TRIPCROSSING(input: update_travelAssignment_trip_tripCrossing): String
}