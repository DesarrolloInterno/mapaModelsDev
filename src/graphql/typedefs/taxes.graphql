type taxes {
  id:ID
  name: String
  SATcode: String
  description: String
  taxChargeType: String
  percentage: String
  taxFactor: String
  status: String
  idAccountingAccountInvoices: String
  accountingAccountInvoices: String
  nameAccountingAccountInvoices: String
  idAccountingAccountPayment: String
  accountingAccountPayment: String
  nameAccountingAccountPayment: String
}

type taxRate {
  id:ID
  percentage: String
}

type Query {
  GET_TAXES(status:String!, idEnterprise: String!): [taxes]
  GET_TAXRATE_INVOICINGCONCEPT(idEnterprise: String!): [taxRate]
}

type return_new_tax{
  idTax: String
  message: String
}

input new_tax {
  SATcode: String,
  description: String,
  taxChargeType: String,
  percentage: String,
  taxFactor: String,
  userLoggedIn: String
  idAccountingAccountInvoices: String
  accountingAccountInvoices: String
  nameAccountingAccountInvoices: String
  idAccountingAccountPayments: String
  accountingAccountPayments: String
  nameAccountingAccountPayments: String
  idEnterprise: String
}

input update_tax {
  idTax: String,
  SATcode: String,
  description: String,
  taxChargeType: String,
  percentage: String,
  taxFactor: String,
  userLoggedIn: String
  idAccountingAccountInvoices: String
  accountingAccountInvoices: String
  nameAccountingAccountInvoices: String
  idAccountingAccountPayments: String
  accountingAccountPayments: String
  nameAccountingAccountPayments: String
  idEnterprise: String
}

input delete_tax {
    idTax: String,
    userLoggedIn: String,
    idEnterprise: String
}

type Mutation {
  CREATE_TAX(input: new_tax): [return_new_tax]
  UPDATE_TAX(input: update_tax): [return_new_tax]
  DELETE_TAX(input: delete_tax): String
}