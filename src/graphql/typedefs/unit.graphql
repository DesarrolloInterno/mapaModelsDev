type unit {
  id: ID
  economicNumber: String,
  idOperator: Int,
  idOwner: Int,
  status: String,
  unitBrand: String,
  unitModel: String,
  typeUnit: String,
  unitLong: String,
  unitBroad: String,
  unitWeight: String,
  licensePlates: String,
  unitYear: String,
  numberAxles: String,
  numberTires: String,
  color: String,
  operativeClasification: String,
  serialNumber: String,
  insurancePolicy: String,
  engineBrand: String,
  engineModel: String,
  horsePower: String,
  engineSerialNumber: String,
  unitFrontView: String,
  unitRightView: String,
  unitBackView: String,
  unitLeftView: String,
  unitExtraView: String,
  carrierKey: String,
  permissionType: String,
  permissionNumber: String,
  environmentalInsurerPolicy: String,
  observations: String,
  idInsurer: Int,
  idEnvironmentalInsurer: Int,
  employee: String,
  owner: String,
  insurer: String,
  environmentalInsurer: String,
  operativeClasificationName: String, 
  typeUnitName: String,
  name: String,
  deletedDate: String,
  linkGps: String
}

type unitDocuments {
    id: ID,
    idUnit: Int,
    documentLink: String,
    status: String,
    idDocument: Int,
    nameDocument: String,
}

type unit_noRetired{
  id: ID,
  economicNumber: String,
  unitModel: String, 
  licensePlates: String, 
  idOperator: Int,
  employee: String,
  idOwner: Int,
  owner: String,
  name: String,
  status: String
}

type bafarUnits {
  idSamsara: String,
  licensePlates: String,
  intEvent: String
}

type Query {
  GET_UNIT(status:String!, idEnterprise:String!): [unit]
  GET_UNIT_DOCUMENTS(idUnit: String!): [unitDocuments]
  GET_UNIT_NO_RETIRED(idEnterprise: String!): [unit_noRetired]
  GET_ACTIVE_UNITS_WITH_ACTIVE_OPERATORS(idEnterprise:String!):[unit]
  GET_ALL_BAFAR_UNITS: [bafarUnits]
}

type return_new_unit{
  idUnit: String
  message: String
}

input new_unit {
  economicNumber: String,
  idOperator: String,
  idOwner: String,
  status: String,
  unitBrand: String,
  unitModel: String,
  typeUnit: String,
  unitLong: String,
  unitBroad: String,
  unitWeight: String,
  licensePlates: String,
  unitYear: String,
  numberAxles: String,
  numberTires: String,
  color: String,
  operativeClasification: String,
  serialNumber: String,
  insurancePolicy: String,
  engineBrand: String,
  engineModel: String,
  horsePower: String,
  engineSerialNumber: String,
  carrierKey: String,
  permissionType: String,
  permissionNumber: String,
  environmentalInsurerPolicy: String,
  observations: String,
  idInsurer: String,
  idEnvironmentalInsurer: String,
  userLoggedIn: String,
  idEnterprise: String,
  linkGps: String
}

input delete_unit {
  idUnit: String,
  userLoggedIn: String,
  deletedDate: String
}

input update_unit {
  idUnit: String,
  economicNumber: String,
  idOperator: String,
  idOwner: String,
  status: String,
  unitBrand: String,
  unitModel: String,
  typeUnit: String,
  unitLong: String,
  unitBroad: String,
  unitWeight: String,
  licensePlates: String,
  unitYear: String,
  numberAxles: String,
  numberTires: String,
  color: String,
  operativeClasification: String,
  serialNumber: String,
  insurancePolicy: String,
  engineBrand: String,
  engineModel: String,
  horsePower: String,
  engineSerialNumber: String,
  carrierKey: String,
  permissionType: String,
  permissionNumber: String,
  environmentalInsurerPolicy: String,
  observations: String,
  idInsurer: String,
  idEnvironmentalInsurer: String,
  userLoggedIn: String,
  idEnterprise: String,
  linkGps: String
}

input edit_unitDocuments {
    idDocument: String,
    idUnit: String,
    documentLink: String,
    userLoggedIn: String
}

input delete_unitDocuments {
    id: String
    userLoggedIn: String
}

type return_new_document{
  documentLink: String
}

input samsaraPosition {
  idSamsara: String,
  strAlias: String,
  intEvent: String,
  intGpsDate: String,
  intServerDate: String,
  dbLatitude: String,
  dbLongitude: String,
  dbAltitude: String,
  intCourse: String,
  dbSpeed: String,
  dbOdometer: String,
  strLocation: String,
  intMsgSequence: String,
  intGpsFix: String,
  intSatellites: String,
  intHDOP: String,
  intInputStatus: String,
  intOutputStatus: String,
  dbBatteryLevel: String,
  engineState: String
}

type return_samsaraPosition {
  strGpsID: String,
  strAlias: String,
	intEvent: String,
	intGpsDate: String,
	intServerDate: String,
	dbLatitude: String,
	dbLongitude: String,
	dbAltitude: String,
	intCourse: String,
	dbSpeed: String,
	dbOdometer: String,
	strLocation: String,
	intMsgSequence: String,
	intGpsFix: String,
	intSatellites: String,
	intHDOP: String,
	intInputStatus: String,
	intOutputStatus: String,
	dbBatteryLevel: String
}

type Mutation {
  CREATE_UNIT(input: new_unit): [return_new_unit]
  DELETE_UNIT(input: delete_unit): String
  UPDATE_UNIT(input: update_unit): [return_new_unit]
  EDIT_UNIT_IMAGES(input: edit_unitDocuments): String
  DELETE_UNIT_DOCUMENTS(input: delete_unitDocuments): [return_new_document]
  SET_SAMSARA_POSITION(input: samsaraPosition): [return_samsaraPosition]
}
