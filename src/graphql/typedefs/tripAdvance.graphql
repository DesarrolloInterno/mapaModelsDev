type tripAdvance {
    id: ID,
    date: String,
    importAdvance: Float,
    idTrip: Int,
    tripOrderNumber: Int,
    idUnit: Int,
    unit: String,
	  idEmployee: Int,
    employee: String,
	  comments: String,
	  status: String,
    userLoggedIn: String
}

type getTripAdvance {
    id: ID,
    date: String,
    importAdvance: Float,
    idTrip: String,
    tripOrderNumber: String,
    idUnit: Int,
    unit: String,
	  idEmployee: Int,
    employee: String,
	  comments: String,
	  status: String,
    userLoggedIn: String,
    reference: String,
    relationTrip: String,
    name: String
}

type tripAdvances {
    id: String,
    loadingDate: String,
    numTrip: String,
    idTruckBox: String,
    truckBox: String,
    idClient: String,
    client: String,
    idUnit: String,
    unit: String,
    idEmployee: String,
    employee: String,
    temperature: String,
    wheelChocks: String,
    straps: String,
    deliveryDate: String,
    observations: String,
    salesFormat: String,
    totalAmountAdvances: String
    tripType: String
}

type tripAdvancesByIdTrip {
  id: String,
  name: String,
  importAdvance: String,
  reference: String,
  comments: String,
  placementDate: String
}

type tripAdvancesCrossing {
    id: String,
    loadingDate: String,
    numTrip: String,
    idTruckBox: String,
    truckBox: String,
    idClient: String,
    client: String,
    idUnit: String,
    unit: String,
    idEmployee: String,
    employee: String,
    temperature: String,
    wheelChocks: String,
    straps: String,
    deliveryDate: String,
    observations: String,
    salesFormat: String,
    totalAmountAdvances: String
    tripType: String,
    typeCrossing: String
}

type Query {
  GET_TRIPADVANCE(status: String!, date1: String!, date2: String!, idEnterprise: String!): [getTripAdvance]
  GET_TRIPADVANCES(date1: String!, date2: String!, idEnterprise: String!, typeFilter: String!): [tripAdvances]
  GET_TRIPADVANCES_BY_IDTRIP(idTrip: String!, idEnterprise: String!): [tripAdvancesByIdTrip]
  GET_TRIPADVANCES_FOR_CROSSING_TRIPS(date1: String!, date2: String!, idEnterprise: String!, typeFilter: String!): [tripAdvancesCrossing]
}

input new_tripAdvance {
  date: String,
  importAdvance: String,
  idTrip: String,
  tripOrderNumber: String,
  idUnit: String,
  idEmployee: String,
  comments: String,
  reference: String,
  relationTrip: String,
  userLoggedIn: String,
  idEnterprise: String
}

type return_new_tripAdvance{
  idTripAdvance: String
  message: String
}

input update_tripAdvance {
  idTripAdvance: String,
  date: String,
  importAdvance: String,
  idTrip: String,
  tripOrderNumber: String,
  idUnit: String,
  idEmployee: String,
  comments: String,
  reference: String,
  relationTrip: String,
  userLoggedIn: String,
  idEnterprise: String
}

input delete_tripAdvance {
  idTripAdvance: String,
  userLoggedIn: String
}

type Mutation {
  CREATE_TRIPADVANCE(input: new_tripAdvance): [return_new_tripAdvance]
  UPDATE_TRIPADVANCE(input: update_tripAdvance): [return_new_tripAdvance]
  DELETE_TRIPADVANCE(input: delete_tripAdvance): String
}
