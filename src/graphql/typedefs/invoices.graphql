type newInvoices {
  idInvoice: ID
  message: String
  messageproducts: String
  messageClient: String
  messageSalesFormat: String
  messageLoadingDate: String
  messageDeliveryDate: String 
  messageTemperature: String
  messageProNumber: String
  messageReference: String
  messageSalesFormatCrossing: String
  tokenInvoice: String
  numInvoice: String
  docXml: String
  docPdf: String
}

type newInvoices2 {
  idInvoice: ID
  message: String
  messageproducts: String
  messageClient: String
  messageSalesFormat: String
  messageLoadingDate: String
  messageDeliveryDate: String 
  messageTemperature: String
  messageProNumber: String
  messageReference: String
  messageSalesFormatCrossing: String
  numInvoice: String
}

type invoiceToken {
  id: ID
  idTrip: String
  dateRecorded: String
  invoiceSeries: String
  numInvoice: String
  certificateNumber: String
  enterpriseZipCode: String
  idClient: String 
  client: String
  clientRFC: String
  clientTAXID: String
  clientPayment: String
  clientPaymentMethod: String
  clientZipCode: String
  clientFiscalSystem: String
  clientUseOfCFDI: String
  clientCodeCountry: String
  subtotal: String
  currency: String
  exchangeRate: String
  total: String
  IVA: String
  RET: String
  internationalTransport: String
  entryExitMerchandise: String
  countryOriginDestination: String
  kilometres: String
  customsClearance: String
  originRFC: String
  origin: String
  originNumRegIdTrib: String
  originFiscalResidency: String
  originAddress: String
  originOutsideAddressNumber: String
  originInsideAddressNumber: String
  originCodeTownship: String
  originCodeState: String
  originCodeCountry: String
  originZipCode: String
  destinationRFC: String
  destination: String
  destinationNumRegIdTrib: String
  destinationFiscalResidency: String
  destinationAddress: String
  destinationOutsideAddressNumber: String
  destinationInsideAddressNumber: String
  destinationCodeTownship: String
  destinationCodeState: String
  destinationCodeCountry: String
  destinationZipCode: String
  totalWeight: String
  idunit: String
  unit: String
  permissionType: String
  permissionNumber: String
  carrierKey: String
  unitWeight: String
  unitLicensePlates: String
  unitYear: String
  insurer: String
  insurancePolicy: String
  idTruckBoxe: String
  truckBoxe: String
  trailerTypes: String
  truckBoxeLicensePlates: String
  idOperator: String
  operator: String
  operatorRFC: String
  driverLicense: String
  operatorAddress: String
  operatorOutsideAddressNumber: String
  operatorInsideAddressNumber: String
  operatorCodeTownship: String
  operatorCodeState: String
  operatorCodeCountry: String
  operatorZipCode: String
  products: String
  digitalStampCertificate: String
  certificateKey: String
  passwordDigitalStampCertificate: String
  cfdiExportType: String
  enterprise: String
  enterpriseRFC: String
  enterpriseFiscalSystemCode: String
  loadingDate: String
  deliveryDate: String
  IVApercentage: String
  tripType: String
  isTaxes: String
}

type invoiceAmounts {
  id: ID
  codeInvoicingConcept: String
  quantity: String
  codeMeasuringUnit: String
  measuringUnit: String
  invoicingConcept: String
  subtotal: String
  taxRate: String
  totalAmount: String
  IVACode: String
  IVAFactor: String
  IVApercentage: String
  IVA: String
  RETCode: String
  RETFactor: String
  RETpercentage: String
  RET: String
  taxCode: String
}

type invoiceAmounts_Front {
  id: ID
  idSalesFormat: Int 
  idInvoicingConcept: Int 
  invoicingConcept: String 
  subtotal: String 
  idIVApercentage: Int
	IVApercentage: String 
  IVA: String 
  idRETpercentage: Int
  RETpercentage: String 
  RET: String 
  totalAmount: String 
  taxRate: String 
  measuringUnit: String
	codeMeasuringUnit: String 
  status: String
  isTaxes: String
  idSalesFormatAmount: Int
  quantity: String
  codeInvoicingConcept: String
}

type invoices {
  id: ID
  numInvoice: String
  invoiceSeries: String
  idTrip: String
  numTrip: String
  invoiceDate: String
  status: String
  dateRemoved: String
	client: String
  origin: String
  originCountry: String
  destination: String
  destinationCountry: String
  idTruckBoxe: String
  truckBoxe: String
  loadingDate: String
  tripType: String
	subtotal: String
  IVA: String
  RET: String
  total: String
  balanceDue: String
  docPDF: String
  docXML: String 
	dateRecorded: String
  userRecorded: String
}

type invoice {
  id: ID
  numInvoice: Int
  invoiceSeries: String
  invoiceDate: String
  status: String
  idClient: Int
  client: String
  clientShortName: String
  clientRFC: String
  idOrigin: Int
  origin: String
  originCountry: String
  fullAddressOrigin: String
  legendOriginCollection: String
  originCodeCountry: String
  idDestination: Int
  destination: String
  destinationCountry: String
  fullAddressDestination: String
  legendDestinationCollection: String
  destinationCodeCountry: String
  idTrip: Int
  numTrip: Int
  travelClassification: String
  kilometres: String
  travelTime: String
  temperature: String
  tripType: String
  currency: String
  taxes: String
  isRefrigerated: String
  isDry: String
  isDoorDoor: String
  isCrossing: String
  isEmpty: String
  isEmptyPaid: String
  requestProofDelivery: String
  idSalesFormatCrossing: Int
  salesFormatCrossing: String
  operatorComments: String
  operationComments: String
  observations: String
  productDescription: String
  crossingType: String
  americanPortion: String
  crossingPortion: String
  mexicanPortion: String
  typeCrossing: String
  total: String
  idPayment: Int
  codePayment: String
  payment: String
  idPaymentMethod: Int
  codePaymentMethod: String
  paymentMethod: String
  idUseOfCFDI: Int
  codeUseOfCFDI: String
  useOfCFDI: String
  loadingDate: String
  deliveryDate: String
  exchangeRate: String
  fullAddressClient: String
  fiscalSystem: String
  idUnit: Int
  unit: String
  unitLicensePlates: String
  idTruckBox: Int
  truckBox: String
  truckBoxeLicensePlates: String
  idOperator: Int
  operator: String
  idSalesFormat: Int
  salesFormat: String
  reference: String
  UUID: String
  docInvoicePdf: String
}

type invoiceDocument {
  id: ID
  numInvoice: String
  sealNumber: String
  invoiceDate: String
  idEnterprise: String
  enterprise: String
  enterpriseRFC: String
  enterpriseFiscalSystem: String
  enterpriseZipCode: String
  enterpriseFullAddress: String
  idTrip: String
  dateRecorded: String
  numTrip: String
  proNumber: String
  kilometres: String
  loadingDate: String
  deliveryDate: String
  tripType: String
  grossWeights: String
  client: String
  idClient: String
  clientFullAddress: String
  reference: String
  clientRFC: String
  clientTAXID: String
  payment: String
  useOfCFDI: String
  paymentMethod: String
  currency: String
  exchangeRate: String
  origin: String
  originRFC: String
  originTAXID: String
  originFullAddress: String
  destination: String
  destinationRFC: String
  destinationTAXID: String
  destinationFullAddress: String
  unit: String
  licensePlatesUnit: String
  insurer: String
  insurancePolicy: String
  carrierKey: String
  permissionType: String
  permissionNumber: String
  truckBox: String
  trailerTypes: String
  licensePlatesTruckBox: String
  stateTruckBox: String
  operator: String
  driverLicense: String
  operatorRFC: String
  countryOperator: String
  subtotal: String
  IVA: String
  RET: String
  total: String
  IVApercentage: String
  RETpercentage: String
  observations: String
  customsClearance: String
  UUID: String
  SATcertificateNumber: String
  dateCFDI: String
  originalChain: String
  CFDIstamp: String
  SATStamp: String
  LinkQR: String
  idCCP: String
  CFDItype: String
}

type newToken {
  toketokenInvoicen: String
  numInvoice: String
  idTrip: String
}

type Query {
  GET_INVOICES_BY_TOKEN(token: String!): [invoiceToken]
  GET_INVOICEAMOUNTS(idInvoice: String!): [invoiceAmounts]
  GET_ALL_INVOICES(typeStatus: String!, date1: String!, date2: String!, date: String!): [invoices]
  GET_ALL_INVOICES_BY_CLIENT(typeStatus: String!, date1: String!, date2: String!, date: String!): [invoices]
  GET_INVOICE_BY_ID(idInvoice: String!): [invoice]
  GET_INVOICEAMOUNTS_BY_ID(idInvoice: String!): [invoiceAmounts_Front]
  GET_INVOICEDOCUMENT(idInvoice: String!): [invoiceDocument]
}

input setNewInvoices {
  idTrip: String
  userLoggedIn: String
}

input setNewInvoices2 {
  idTrip: String
  idUseOfCFDI: String
  idPaymentMethod: String
  idPayment: String
  currency: String
  exchangeRate: String
  userLoggedIn: String
}

input updateInvoices2 {
  idInvoice: String
  idTrip: String
  idUseOfCFDI: String
  idPaymentMethod: String
  idPayment: String
  currency: String
  exchangeRate: String
  userLoggedIn: String
}

input setCFDIInvoices {
  idInvoice: String
  UUID: String
  dateCFDI: String
  codStatus: String
  satSeal: String
  SATcertificateNumber: String
  CFDIstamp: String
  SATStamp: String
  originalChain: String
  LinkQR: String
  xmlText: String
  idCCP: String
  userLoggedIn: String
}

input setLinkPDFXMLInvoice {
  idInvoice: String
  linkPDF: String
  linkXML: String
  linkInvoicePDF: String
  userLoggedIn: String
}

input setInvoiceAmount {
  idInvoiceAmount: String
  idInvoice: String
  idTrip: String
  idSalesFormatAmounts: String
  idInvoicingConcept: String
  subtotal: String
  idIVApercentage: String
  IVApercentage: String
  IVA: String
  idRETpercentage: String
  RETpercentage: String
  RET: String
  totalAmount: String
  idSalesFormat: String
  codeMeasuringUnit: String
  measuringUnit: String
  isTaxes: String
  userLoggedIn: String
  status: String
}

input setTokenStampInvoice {
  idInvoice: String
  userLoggedIn: String
}

type Mutation {
  CREATE_INVOICE_FROM_TRIP(input: setNewInvoices): [newInvoices]
  CREATE_INVOICE(input: setNewInvoices2): [newInvoices2]
  UPDATE_INVOICE(input: updateInvoices2): [newInvoices2]
  UPDATE_INVOICE_CFDI(input: setCFDIInvoices): String
  SET_LINK_PDF_XML_INVOICE(input: setLinkPDFXMLInvoice): String
  SET_INVOICE_AMOUNTS(input: setInvoiceAmount): String
  SET_TOKEN_STAMPINVOICE(input: setTokenStampInvoice): [newToken]
}