type newInvoices {
  idInvoice: ID
  message: String
  messageproducts: String
  messageClient: String
  messageSalesFormat: String
  messageLoadingDate: String
  messageDeliveryDate: String 
  messageTemperature: String
  messageProNumber: String
  messageReference: String
  messageSalesFormatCrossing: String
  tokenInvoice: String
  numInvoice: String
  docXml: String
  docPdf: String
}

type newInvoices2 {
  idInvoice: ID
  message: String
  messageproducts: String
  messageClient: String
  messageSalesFormat: String
  messageLoadingDate: String
  messageDeliveryDate: String 
  messageTemperature: String
  messageProNumber: String
  messageReference: String
  messageSalesFormatCrossing: String
  numInvoice: String
}

type invoiceToken {
  id: ID
  idTrip: String
  dateRecorded: String
  invoiceSeries: String
  numInvoice: String
  certificateNumber: String
  enterpriseZipCode: String
  idClient: String 
  client: String
  clientRFC: String
  clientTAXID: String
  clientPayment: String
  clientPaymentMethod: String
  clientZipCode: String
  clientFiscalSystem: String
  clientUseOfCFDI: String
  clientCodeCountry: String
  subtotal: String
  currency: String
  exchangeRate: String
  total: String
  IVA: String
  RET: String
  internationalTransport: String
  entryExitMerchandise: String
  countryOriginDestination: String
  kilometres: String
  customsClearance: String
  originRFC: String
  origin: String
  originNumRegIdTrib: String
  originFiscalResidency: String
  originAddress: String
  originOutsideAddressNumber: String
  originInsideAddressNumber: String
  originCodeTownship: String
  originCodeState: String
  originCodeCountry: String
  originZipCode: String
  destinationRFC: String
  destination: String
  destinationNumRegIdTrib: String
  destinationFiscalResidency: String
  destinationAddress: String
  destinationOutsideAddressNumber: String
  destinationInsideAddressNumber: String
  destinationCodeTownship: String
  destinationCodeState: String
  destinationCodeCountry: String
  destinationZipCode: String
  totalWeight: String
  idunit: String
  unit: String
  permissionType: String
  permissionNumber: String
  carrierKey: String
  unitWeight: String
  unitLicensePlates: String
  unitYear: String
  insurer: String
  insurancePolicy: String
  idTruckBoxe: String
  truckBoxe: String
  trailerTypes: String
  truckBoxeLicensePlates: String
  idOperator: String
  operator: String
  operatorRFC: String
  driverLicense: String
  operatorAddress: String
  operatorOutsideAddressNumber: String
  operatorInsideAddressNumber: String
  operatorCodeTownship: String
  operatorCodeState: String
  operatorCodeCountry: String
  operatorZipCode: String
  products: String
  digitalStampCertificate: String
  certificateKey: String
  passwordDigitalStampCertificate: String
  cfdiExportType: String
  enterprise: String
  enterpriseRFC: String
  enterpriseFiscalSystemCode: String
  loadingDate: String
  deliveryDate: String
  IVApercentage: String
  tripType: String
  isTaxes: String
}

type invoiceAmounts {
  id: ID
  codeInvoicingConcept: String
  quantity: String
  codeMeasuringUnit: String
  measuringUnit: String
  invoicingConcept: String
  subtotal: String
  taxRate: String
  totalAmount: String
  IVACode: String
  IVAFactor: String
  IVApercentage: String
  IVA: String
  RETCode: String
  RETFactor: String
  RETpercentage: String
  RET: String
  taxCode: String
}

type invoicesForCollection {
  id: String,
  invoiceDate: String,
  numInvoice: String,
  numTrip: String,
  tripStatus: String,
  idClient: String,
  client: String,
  creditDays: String,
  origin: String,
  destination: String,
  orderDate: String,
  unit: String,
  truckBoxe: String,
  status: String,
  sentForCollectionDate: String,
  billingReceptionPersonMail: String,
  total: String,
  invoiceSeries: String
}

type invoiceById {
  id: String,
  enterpriseLogo: String,
  client: String,
  numInvoice: String,
  invoiceSeries: String,
  total: String,
	invoiceDate: String, 
  sentForCollectionDate: String,
	mail: String,
  creditDays: String
}

type invoiceCollectionForecast {
  id: String,
  idClient: String,
  client: String,
  numTrip: String,
  cCPDate: String,
  numInvoice: String,
  invoiceSeries: String,
	invoiceDate: String,
  userRecorded: String,
  creditDays: String,
	remainingDays: String,
	total: String,
  subtotal: String,
  currency: String
}

type summaryInvoiceCollectionForecast {
  idClient: String,
  client: String,
	total: String
}

type invoicesForAnalysis {
  id: String,
  invoiceDate: String,
  numInvoice: String,
  numTrip: String,
  idClient: String,
  client: String,
  creditDays: String,
	unit: String,
  truckBoxe: String,
  sentForCollectionDate: String,
  invoiceSeries: String,
	loadingDate: String,
  dateCFDI: String,
  IVA: String,
  RET: String,
  subtotal: String,
  total: String,
	idOperator: String,
  operator: String,
  completeInvoice: String,
  currency: String,
	daysToInvoice: String,
	possiblePaymentDate: String
}

type invoicesDocuments {
  id: ID,
  idInvoice: Int,
  idDocument: Int,
  nameDocument: String,
  documentLink: String,
  status: String
}

type invoiceAmounts_Front {
  id: ID
  idSalesFormat: Int 
  idInvoicingConcept: Int 
  invoicingConcept: String 
  subtotal: String 
  idIVApercentage: Int
	IVApercentage: String 
  IVA: String 
  idRETpercentage: Int
  RETpercentage: String 
  RET: String 
  totalAmount: String 
  taxRate: String 
  measuringUnit: String
	codeMeasuringUnit: String 
  status: String
  isTaxes: String
  idSalesFormatAmount: Int
  quantity: String
  codeInvoicingConcept: String
}

type invoices {
  id: ID
  numInvoice: String
  invoiceSeries: String
  idTrip: String
  numTrip: String
  invoiceDate: String
  status: String
  dateRemoved: String
	client: String
  origin: String
  originCountry: String
  destination: String
  destinationCountry: String
  idTruckBoxe: String
  truckBoxe: String
  loadingDate: String
  tripType: String
	subtotal: String
  IVA: String
  RET: String
  total: String
  balanceDue: String
  docPDF: String
  docXML: String 
	dateRecorded: String
  userRecorded: String
  TAXID: String
}

type invoice {
  id: ID
  numInvoice: Int
  invoiceSeries: String
  invoiceDate: String
  status: String
  idClient: Int
  client: String
  clientShortName: String
  clientRFC: String
  idOrigin: Int
  origin: String
  originCountry: String
  fullAddressOrigin: String
  legendOriginCollection: String
  originCodeCountry: String
  idDestination: Int
  destination: String
  destinationCountry: String
  fullAddressDestination: String
  legendDestinationCollection: String
  destinationCodeCountry: String
  idTrip: Int
  numTrip: Int
  travelClassification: String
  kilometres: String
  travelTime: String
  temperature: String
  tripType: String
  currency: String
  taxes: String
  isRefrigerated: String
  isDry: String
  isDoorDoor: String
  isCrossing: String
  isEmpty: String
  isEmptyPaid: String
  requestProofDelivery: String
  idSalesFormatCrossing: Int
  salesFormatCrossing: String
  operatorComments: String
  operationComments: String
  observations: String
  productDescription: String
  crossingType: String
  americanPortion: String
  crossingPortion: String
  mexicanPortion: String
  typeCrossing: String
  total: String
  idPayment: Int
  codePayment: String
  payment: String
  idPaymentMethod: Int
  codePaymentMethod: String
  paymentMethod: String
  idUseOfCFDI: Int
  codeUseOfCFDI: String
  useOfCFDI: String
  loadingDate: String
  deliveryDate: String
  exchangeRate: String
  fullAddressClient: String
  fiscalSystem: String
  idUnit: Int
  unit: String
  unitLicensePlates: String
  idTruckBox: Int
  truckBox: String
  truckBoxeLicensePlates: String
  idOperator: Int
  operator: String
  idSalesFormat: Int
  salesFormat: String
  reference: String
  UUID: String
  docInvoicePdf: String
  TAXID: String
  invoiceObservations: String
}

type invoiceDocument {
  id: ID
  numInvoice: String
  sealNumber: String
  invoiceDate: String
  idEnterprise: String
  enterprise: String
  enterpriseRFC: String
  enterpriseFiscalSystem: String
  enterpriseZipCode: String
  enterpriseFullAddress: String
  idTrip: String
  dateRecorded: String
  numTrip: String
  proNumber: String
  kilometres: String
  loadingDate: String
  deliveryDate: String
  tripType: String
  grossWeights: String
  client: String
  idClient: String
  clientFullAddress: String
  reference: String
  clientRFC: String
  clientTAXID: String
  payment: String
  useOfCFDI: String
  paymentMethod: String
  currency: String
  exchangeRate: String
  origin: String
  originRFC: String
  originTAXID: String
  originFullAddress: String
  destination: String
  destinationRFC: String
  destinationTAXID: String
  destinationFullAddress: String
  unit: String
  licensePlatesUnit: String
  insurer: String
  insurancePolicy: String
  carrierKey: String
  permissionType: String
  permissionNumber: String
  truckBox: String
  trailerTypes: String
  licensePlatesTruckBox: String
  stateTruckBox: String
  operator: String
  driverLicense: String
  operatorRFC: String
  countryOperator: String
  subtotal: String
  IVA: String
  RET: String
  total: String
  IVApercentage: String
  RETpercentage: String
  observations: String
  customsClearance: String
  UUID: String
  SATcertificateNumber: String
  dateCFDI: String
  originalChain: String
  CFDIstamp: String
  SATStamp: String
  LinkQR: String
  idCCP: String
  CFDItype: String
  invoiceObservations: String
}

type newToken {
  tokenInvoice: String
  numInvoice: String
  idTrip: String
}

type newTokenAssetInvoice {
  tokenInvoice: String
  numInvoice: String
}

type assetInvoiceAmounts {
  id: ID
  idSalesFormat: Int 
  idInvoicingConcept: Int 
  invoicingConcept: String 
  subtotal: String 
  idIVApercentage: Int
	IVApercentage: String 
  IVA: String 
  idRETpercentage: Int
  RETpercentage: String 
  RET: String 
  totalAmount: String 
  taxRate: String 
  measuringUnit: String
	codeMeasuringUnit: String 
  status: String
  isTaxes: String
  idSalesFormatAmount: Int
  quantity: String
  codeInvoicingConcept: String
  unitImport: String
}

type assetInvoices{
  id: String, 
  numInvoice: String, 
  invoiceSeries: String, 
  invoiceDate: String, 
  status: String, 
	idClient: String, 
  client: String, 
  clientShortName: String, 
  clientRFC: String, 
	fullAddressClient: String, 
  fiscalSystem: String,	
  idTrip: String, 
  numTrip: String, 
  currency: String, 
  taxes: String, 
  total: String, 
  idPayment: String,
	codePayment: String, 
  payment: String, 
  idPaymentMethod: String, 
  codePaymentMethod: String, 
  paymentMethod: String, 
  idUseOfCFDI: String, 
  codeUseOfCFDI: String, 
  useOfCFDI: String,
	exchangeRate: String, 
  UUID: String, 
  docInvoicePdf: String,
  clientTAXID: String,
  invoiceObservations: String
}

type assetInvoiceDocument {
  id: ID,
  numInvoice: String,
  sealNumber: String,
  invoiceDate: String,
  idEnterprise: String,
  enterprise: String,
  enterpriseRFC: String,
  enterpriseFiscalSystem: String,
  enterpriseZipCode: String,
  enterpriseFullAddress: String,
  idTrip: String,
  dateRecorded: String,
  numTrip: String,
  client: String,
  idClient: String,
  clientFullAddress: String,
  clientRFC: String,
  clientTAXID: String,
  payment: String,
  useOfCFDI: String,
  paymentMethod: String,
  currency: String,
  exchangeRate: String,
  subtotal: String,
  IVA: String,
  RET: String,
  total: String,
  IVApercentage: String,
  RETpercentage: String,
  UUID: String,
  SATcertificateNumber: String,
  dateCFDI: String,
  originalChain: String,
  CFDIstamp: String,
  SATStamp: String,
  LinkQR: String,
  CFDItype: String,
  invoiceObservations: String
}

type highestBilledClients{
  id: String,
  shortName: String,
	invoicesQuantity: String,
  total: String,
	IVA: String,
  RET: String,
	totalAmountInvoices: String,
	currency: String
}

type relatedInvoices {
  id: String,
  idCurrentInvoice: String,
  numCurrentInvoice: String,
  uuidCurrentInvoice: String,
  idPreviousInvoice: String,
  numPreviousInvoice: String,
  uuidPreviousInvoice: String,
  idRelationshipType: String,
  relationshipTypeCode: String,
  relationshipType: String,
  status: String
}

type cancelledInvoices {
  id: ID,
  numInvoice: Int,
  invoiceSeries: String,
  idTrip: Int,
  numTrip: Int,
  dateCFDI: String,
  UUID: String,
  currency: String,
  total: String,
  cancelationCode: String,
  userRemoved: String,
  cancellationProcess: String,
  dateRemoved: String,
  statusCFDI: String,
  statusSAT: String,
  idInvoiceReplaces: Int,
  numInvoiceReplaces: Int,
  invoiceSeriesReplaces: String,
  cancellationReasons: String,
  client: String,
  UUIDReplaces: String
}

type invoices_relatedInvoice{
  id: String,
	idCurrentInvoice: Int, 
	numCurrentInvoice: Int,
	uuidCurrentInvoice: String,
	idPreviousInvoice: Int,
	numPreviousInvoice: Int,
	uuidPreviousInvoice: String,
	idRelationshipType: Int,
	relationshipTypeCode: String,
	relationshipType: String,
	status: String,
}

type invoice_for_cancel{
  id: String,
	previousUUID: String,
  currentUUID: String,
  cancelationCode: String,
  digitalStampCertificate: String,
  certificateKey: String,
  passwordDigitalStampCertificate: String,
  enterpriseRFC: String
}

type invoicesToForward{
  id: String,
  numInvoice: String,
  invoiceSeries: String,
  invoiceDate: String,
  client: String,
  docInvoicePdf: String,
  docXml: String
}

type invoiceTermsAndConditions {
  id: String,
  termsAndConditions: String,
  status: String
}

type invoicesToRelate {
  id: String, 
  idInvoice: String, 
  numInvoice: String, 
  invoiceDate: String, 
  total: String, 
  relationshipType: String, 
  invoiceSeries: String, 
  client: String,
  status: String
}

type tripCustomsClearance {
  customsClearance: String
}

type Query {
  GET_INVOICES_BY_TOKEN(token: String!): [invoiceToken]
  GET_INVOICEAMOUNTS(idInvoice: String!): [invoiceAmounts]
  GET_ALL_INVOICES_FOR_COLLECTION(date1: String!, date2: String!, typeFilter: String!, idEnterprise: String!): [invoicesForCollection]
  GET_INVOICE_FOR_COLLECTION(date1: String!, date2: String!, typeFilter: String!): [invoicesForCollection]
  GET_INVOICE_BY_ID_INVOICE(idInvoice: String!): [invoiceById]
  GET_ALL_INVOICES_FOR_COLLECTION_FORECAST(date1: String!, currency: String!, idEnterprise: String!, filterStatusType: String!): [invoiceCollectionForecast]
  GET_ALL_SUMMARY_INVOICES_FOR_COLLECTION_FORECAST(date1: String!, currency: String!, idEnterprise: String!): [summaryInvoiceCollectionForecast]
  GET_ALL_INVOICES_FOR_ANALYSIS(date1: String!, date2: String!, dateTypeFilter: String!, idEnterprise: String!, currency: String!): [invoicesForAnalysis]
  GET_ALL_INVOICES_DOCUMENTS(idInvoice: String!): [invoicesDocuments]
  GET_INVOICES_DOCUMENTS_BY_ID(idInvoiceDocument: String!): [invoicesDocuments]
  GET_ALL_INVOICES(typeStatus: String!, date1: String!, date2: String!, date: String!, idEnterprise: String!): [invoices]
  GET_ALL_INVOICES_BY_CLIENT(typeStatus: String!, date1: String!, date2: String!, date: String!): [invoices]
  GET_INVOICE_BY_ID(idInvoice: String!, idEnterprise: String!): [invoice]
  GET_INVOICEAMOUNTS_BY_ID(idInvoice: String!): [invoiceAmounts_Front]
  GET_INVOICEDOCUMENT(idInvoice: String!): [invoiceDocument]
  GET_ASSET_INVOICEAMOUNTS_BY_ID(idInvoice: String!): [assetInvoiceAmounts]
  GET_ALL_ASSET_INVOICES(typeStatus: String!, date1: String!, date2: String!, date: String!, idEnterprise: String!): [invoices]
  GET_ASSET_INVOICES_BY_TOKEN(token: String!): [invoiceToken]
  GET_ASSET_INVOICES_BY_ID(idInvoice: String!, idEnterprise: String!): [assetInvoices]
  GET_ASSETINVOICEDOCUMENT(idInvoice: String!): [assetInvoiceDocument]
  GET_ALL_HIGHEST_BILLED_CLIENTS(yearFilter: String!, monthFilter: String!, idEnterprise: String!): [highestBilledClients]
  GET_INVOICES_RELATED_INVOICE(idInvoice: String!): [relatedInvoices]
  GET_CANCELLED_INVOICES(date1: String!, date2: String!, dateCancelled1: String!, dateCancelled2: String!, status: String!, typeCancelled: String!, idEnterprise: String!): [cancelledInvoices]
  GET_INVOICES_RELATEDINVOICES(idInvoice: String!): [invoices_relatedInvoice]
  GET_INVOICE_FOR_CANCEL(token: String!): [invoice_for_cancel]
  GET_ALL_INVOICES_TO_FORWARD(invoiceMonth: String!, invoiceYear: String!, idEnterprise: String!): [invoicesToForward]
  GET_INVOICE_TERMS_AND_CONDITIONS(idEnterprise: String!): [invoiceTermsAndConditions]
  GET_ALL_RELATED_INVOICES_BY_ID_INVOICE(idInvoice: String!, idEnterprise: String!): [invoicesToRelate]
  GET_ALL_INVOICES_BY_CLIENT_TO_RELATE(idClient: String!, idEnterprise: String!, folioFilter: String!): [invoicesToRelate]
  GET_TRIP_CUSTOMS_CLEARANCE(idTrip: String!): [tripCustomsClearance]
}

input setNewInvoices {
  idTrip: String
  userLoggedIn: String
}

input setNewInvoices2 {
  idTrip: String
  idUseOfCFDI: String
  idPaymentMethod: String
  idPayment: String
  currency: String
  exchangeRate: String
  userLoggedIn: String
  invoiceObservations: String
}

input updateInvoices2 {
  idInvoice: String
  idTrip: String
  idUseOfCFDI: String
  idPaymentMethod: String
  idPayment: String
  currency: String
  exchangeRate: String
  userLoggedIn: String
  invoiceObservations: String
}

input setCFDIInvoices {
  idInvoice: String
  UUID: String
  dateCFDI: String
  codStatus: String
  satSeal: String
  SATcertificateNumber: String
  CFDIstamp: String
  SATStamp: String
  originalChain: String
  LinkQR: String
  xmlText: String
  idCCP: String
  userLoggedIn: String
}

input setLinkPDFXMLInvoice {
  idInvoice: String
  linkPDF: String
  linkXML: String
  linkInvoicePDF: String
  userLoggedIn: String
}

input setLinkAcuseInvoice {
  idInvoice: String
  linkXML: String
  userLoggedIn: String
}

input setLinkPDFXMLAssetInvoice {
  idInvoice: String
  linkXML: String
  linkInvoicePDF: String
  userLoggedIn: String
}

input setInvoiceAmount {
  idInvoiceAmount: String
  idInvoice: String
  idTrip: String
  idSalesFormatAmounts: String
  idInvoicingConcept: String
  subtotal: String
  idIVApercentage: String
  IVApercentage: String
  IVA: String
  idRETpercentage: String
  RETpercentage: String
  RET: String
  totalAmount: String
  idSalesFormat: String
  codeMeasuringUnit: String
  measuringUnit: String
  isTaxes: String
  userLoggedIn: String
  status: String
}

input setTokenStampInvoice {
  idInvoice: String
  userLoggedIn: String
}

input setTokenStampAssetInvoice {
  idInvoice: String
  userLoggedIn: String
}

input setInvoiceShippingDate {
  idInvoice: String
  userLoggedIn: String
  sentForCollectionDate: String
}

type return_invoiceShippingDate {
  idInvoice: String
  message: String
}

type new_invoicesDocuments {
    idDocument: String
}

input set_invoicesDocuments {
  idInvoice: String,
  userLoggedIn: String
}

input set_link_invoicesDocuments {
  idDocument: String,
  link: String,
  document: String,
  userLoggedIn: String
}

input delete_invoicesDocuments {
  idDocument: String,
  userLoggedIn: String
}

input newAssetInvoice {
  idEnterprise: String,
  idClient: String,
  currency: String,
  exchangeRate: String,
  userLoggedIn: String,
  idPaymentMethod: String,
  idUseOfCFDI: String,
  idPayment: String,
  invoiceObservations: String
}

type return_newAssetInvoice {
  idInvoice: ID
  message: String
  numInvoice: String
}

input setInvoiceAmount {
  idInvoiceAmount: String
  idInvoice: String
  idTrip: String
  idSalesFormatAmounts: String
  idInvoicingConcept: String
  subtotal: String
  idIVApercentage: String
  IVApercentage: String
  IVA: String
  idRETpercentage: String
  RETpercentage: String
  RET: String
  totalAmount: String
  idSalesFormat: String
  codeMeasuringUnit: String
  measuringUnit: String
  isTaxes: String
  userLoggedIn: String
  status: String
  quantity: String
}

input updateAssetInvoice {
  idInvoice: String,
  idEnterprise: String,
  idClient: String,
  currency: String,
  exchangeRate: String,
  userLoggedIn: String,
  idPaymentMethod: String,
  idUseOfCFDI: String,
  idPayment: String,
  invoiceObservations: String
}

input setAssetInvoiceAmount {
  idInvoiceAmount: String,
  idInvoice: String,
  idTrip: String,
  idSalesFormatAmounts: String,
  idInvoicingConcept: String,
  idIVApercentage: String,
  IVApercentage: String,
  IVA: String,
  idRETpercentage: String,
  RETpercentage: String,
  RET: String,
  totalAmount: String,
  idSalesFormat: String,
  codeMeasuringUnit: String,
  measuringUnit: String,
  isTaxes: String,
  userLoggedIn: String,
  status: String,
  quantity: String,
  unitImport: String,
  subtotal: String
}

input deleteInvoiceFromTrip {
  idInvoice: String,
  idTrip: String,
  idCancellationCode: String,
  cancellationReasons: String,
  userLoggedIn: String
}

input invoiceCancelCfdi {
  idInvoice: String,
  dateCancelCFDI: String,
  statusUUID: String,
  statusCancelCFDI: String,
  userLoggedIn: String
}

input deleteAssetInvoice {
  idInvoice: String,
  idTrip: String,
  idCancellationCode: String,
  cancellationReasons: String,
  userLoggedIn: String
}

input relateInvoice {
  idCurrentInvoice: String,
  numCurrentInvoice: String,
  idPreviousInvoice: String,
  numPreviousInvoice: String,
  idRelationshipType: String,
  relationshipType: String,
  userLoggedIn: String,
  idEnterprise: String
}

type return_relatedInvoice {
  idRelatedInvoice: String,
  message: String
}

input deleteRelatedInvoices{
  idInvoice: String,
  userLoggedIn: String,
  idEnterprise: String
}

type return_invoiceObservations {
  idInvoice: String,
  message: String
}

input updateInvoiceObservations{
  idInvoice: String,
  invoiceObservations: String,
  userLoggedIn: String
}

type Mutation {
  CREATE_INVOICE_FROM_TRIP(input: setNewInvoices): [newInvoices]
  CREATE_INVOICE(input: setNewInvoices2): [newInvoices2]
  UPDATE_INVOICE(input: updateInvoices2): [newInvoices2]
  UPDATE_INVOICE_CFDI(input: setCFDIInvoices): String
  SET_LINK_PDF_XML_INVOICE(input: setLinkPDFXMLInvoice): String
  SET_LINK_ACUSE_INVOICE(input: setLinkAcuseInvoice): String
  SET_INVOICE_SHIPPINGDATE(input: setInvoiceShippingDate): [return_invoiceShippingDate]
  SET_INVOICES_DOCUMENTS(input: set_invoicesDocuments): [new_invoicesDocuments]
  SET_LINK_INVOICES_DOCUMENTS(input: set_link_invoicesDocuments): String
  DELETE_INVOICES_DOCUMENTS(input: delete_invoicesDocuments): String
  SET_INVOICE_AMOUNTS(input: setInvoiceAmount): String
  SET_TOKEN_STAMPINVOICE(input: setTokenStampInvoice): [newToken]
  SET_TOKENCANCEL_STAMPINVOICE(input: setTokenStampInvoice): [newToken]
  CREATE_ASSET_INVOICE(input: newAssetInvoice): [return_newAssetInvoice]
  SET_ASSET_INVOICE_AMOUNTS(input: setAssetInvoiceAmount): String
  UPDATE_ASSET_INVOICE(input: updateAssetInvoice): [return_newAssetInvoice]
  SET_LINK_PDF_XML_ASSET_INVOICE(input: setLinkPDFXMLAssetInvoice): String,
  DELETE_INVOICE_FROM_TRIP(input: deleteInvoiceFromTrip): String
  UPDATE_INVOICE_CANCEL_CFDI(input: invoiceCancelCfdi): String
  DELETE_ASSET_INVOICE(input: deleteAssetInvoice): String
  SET_TOKENCANCEL_STAMPASSETINVOICE(input: setTokenStampAssetInvoice): [newTokenAssetInvoice]
  RELATE_INVOICES(input: relateInvoice): [return_relatedInvoice]
  DELETE_RELATED_INVOICES_BY_ID_INVOICE(input: deleteRelatedInvoices): String
  UPDATE_INVOICE_OBSERVATIONS(input: updateInvoiceObservations): [return_invoiceObservations]
}