type tripOrder {
  id:ID
  idClient: Int
  client: String
  clientShortName: String
  RFC: String
  idOrigin: Int
  origin: String
  fullAddressOrigin: String
  legendOriginCollection: String
  idDestination: Int
  destination: String
  fullAddressDestination: String
  legendDestinationCollection: String
  originDestination: String
  travelClassification: String
  kilometres: String
  travelTime: String
  temperature: String
  tripType: String
  currency: String
  taxes: String
  isCrossing: Int
  idSalesFormatCrossing: Int
  salesFormatCrossing: String
  operatorComments: String
  operationComments: String
  observations: String
  status: String
  productDescription: String
  crossingType: String
  tripTypeName: String
  americanPortion: String
  crossingPortion: String
  mexicanPortion: String
  loadingDate: String
  deliveryDate: String
  sealNumber: String
  proNumber: String
  wheelChocks: String
  straps: String
  reference: String
  orderPriority: Int
  idSalesFormat: Int
  saleFormat: String
  containers: String
  shippingLines: String
  numTripOrder: Int
  customsClearance: String
  countryOrigin: String
  countryDestination: String
  typeCrossing: String
  idTripOrigin: Int
  numTripOrigin: String,
  total: String
  orderDate: String
  subtotal: String
  UUID: String
  docPdf: String
  IVA: String
  RET: String
  isRefrigerated: String
  numTripOrderOrigin: String
}

type tripOrderSafetyEquipment {
  id:ID
  idTripOrder: String
  idSalesFormat: String
  name: String
  description: String
  status: String
  numTripOrder: Int
}

type responseConfirmTripOrder {
  message: String
  messageproducts: String
  messageClient: String
  messageSalesFormat: String
  messageLoadingDate: String
  messageDeliveryDate: String
  messageTemperature: String
  messageProNumber: String
  messageReference: String
  messageSalesFormatCrossing: String
}

type customsClearanceMessage {
  customsClearanceMessage: String
}

type validated_tripOrder {
  id:ID
  idClient: Int
  client: String
  clientShortName: String
  RFC: String
  idOrigin: Int
  origin: String
  fullAddressOrigin: String
  legendOriginCollection: String
  idDestination: Int
  destination: String
  fullAddressDestination: String
  legendDestinationCollection: String
  originDestination: String
  travelClassification: String
  kilometres: String
  travelTime: String
  temperature: String
  tripType: String
  currency: String
  taxes: String
  isCrossing: Int
  idSalesFormatCrossing: Int
  salesFormatCrossing: String
  operatorComments: String
  operationComments: String
  observations: String
  status: String
  productDescription: String
  crossingType: String
  tripTypeName: String
  americanPortion: String
  crossingPortion: String
  mexicanPortion: String
  loadingDate: String
  deliveryDate: String
  sealNumber: String
  proNumber: String
  wheelChocks: String
  straps: String
  reference: String
  orderPriority: Int
  idSalesFormat: Int
  saleFormat: String
  containers: String
  shippingLines: String
  numTripOrder: Int
  customsClearance: String
  countryOrigin: String
  countryDestination: String
  typeCrossing: String
  idTripOrigin: Int
  numTripOrigin: String,
  total: String
  orderDate: String
  subtotal: String
  idOperator: Int
  operator: String
  idUnit: Int
  unit: String
	idTruckBox: Int
  truckBox: String
  isRefrigerated: Int
}

type tripOrderById{
  id: String, 
  idClient: String, 
  client: String, 
  clientShortName: String, 
  RFC: String, 
  TAXID: String, 
  idOrigin: String,
  origin: String, 
  originDestination: String, 
  codeCountryOrigin: String,
  fullAddressOrigin: String, 
  legendOriginCollection: String, 
  idDestination: String, 
  destination: String, 
  fullAddressDestination: String, 
  legendDestinationCollection: String, 
  codeCountryDestination: String,
  travelClassification: String, 
  kilometres: String, 
  travelTime: String, 
  temperature: String, 
  tripType: String,
  currency: String, 
  taxes: String, 
  isCrossing: String, 
  idSalesFormatCrossing: String, 
  salesFormatCrossing: String,
  operatorComments: String, 
  operationComments: String, 
  observations: String, 
  status: String, 
  productDescription: String,
  crossingType: String, 
  tripTypeName: String, 
  americanPortion: String, 
  crossingPortion: String,
  mexicanPortion: String, 
  loadingDate: String, 
  deliveryDate: String, 
  sealNumber: String, 
  proNumber: String,
  wheelChocks: String, 
  straps: String, 
  reference: String, 
  orderPriority: String, 
  idSalesFormat: String,
  saleFormat: String, 
  containers: String, 
  shippingLines: String, 
  numTripOrder: String, 
  customsClearance: String,
  countryOrigin: String, 
  countryDestination: String, 
  typeCrossing: String, 
  idTripOrigin: String, 
  numTripOrigin: String,
  numTrip: String, 
  idOperator: String, 
  operator: String, 
  idUnit: String, 
  unit: String, 
  unitLicensePlates: String, 
  unitStatus: String,
  idTruckBox: String, 
  truckBox: String, 
  truckBoxLicensePlates: String, 
  truckBoxStatus: String,
  total: String, 
  orderDate: String,
  isRefrigerated: String, 
  isDry: String, 
  isDoorDoor: String, 
  isEmpty: String, 
  isEmptyPaid: String, 
  requestProofDelivery: String,
  name: String, 
  classifyAsCrossover: String, 
  subtotal: String, 
  IVA: String, 
  RET: String
}

type tripOrderAmounts {
  id: String, 
  idSalesFormat: String, 
  idInvoicingConcept: String, 
  invoicingConcept: String, 
  subtotal: String,
  idIVApercentage: String,
	IVApercentage: String, 
  IVA: String, 
  idRETpercentage: String, 
  RETpercentage: String, 
  RET: String, 
  totalAmount: String,
	taxRate: String, 
  measuringUnit: String,
	codeMeasuringUnit: String, 
  status: String
}

type tripOrderForCrossings {
  id:ID
  numTripOrder: Int
  idClient: Int
  client: String
  idOrigin: Int
  Origin: String
  idDestination: Int
  Destination: String
  deliveryDate: String
  loadingDate: String
  idEmployee: Int
  Employee: String
  nickname: String
  idTruckBox: Int
  truckBox: String
  idUnit: Int
  unit: String
  status: String
  tripType: String
  typeCrossing: String
  numTrip: String
}

type Query {
  GET_ALL_TRIP_ORDER(typeFilter:String!, date: String!, date1: String!, date2: String!, idEnterprise: String!): [tripOrder]
  GET_ALL_CROSSING_TRIP_ORDER(typeFilter:String!, date: String!, date1: String!, date2: String!, idEnterprise:String!): [tripOrder]
  GET_SAFETY_EQUIPMENT_TRIP_ORDER(idTripOrder: String!): [tripOrderSafetyEquipment]
  GET_ALL_VALIDATED_TRIP_ORDERS(typeFilter:String!, date: String!, date1: String!, date2: String!): [validated_tripOrder]
  GET_ALL_TRIP_ORDER_BY_ID_TRIP_ORDER(idTripOrder: String!, idEnterprise: String!): [tripOrderById]
  GET_TRIP_ORDER_AMOUNTS_BY_ID_TRIP_ORDER(idTripOrder: String!): [tripOrderAmounts]
  GET_ALL_TRIP_ORDER_FOR_CROSSING(date1: String!, date2: String!, idEnterprise: String!): [tripOrderForCrossings]
}

input new_tripOrder {
  orderDate: String,
  tripType: String,
  userLoggedIn: String,
  idEnterprise: String
}

input new_orderPriority {
  idTripOrder: String,
  orderPriority: String,
  userLoggedIn: String
}

input delete_tripOrder {
  idTripOrder: String,
  userLoggedIn: String
}

input update_customsClearance_tripOrder {
  idTripOrder: String
  customsClearance: String
  userLoggedIn: String
  customsClearanceMessage: String
}

input set_client_tripOrder {
  idClient: String,
  idTripOrder: String,
  userLoggedIn: String
}

input set_salesFormat_tripOrder {
  idSalesFormat: String,
  idTripOrder: String,
  userLoggedIn: String
}

input update_tripOrder_mooringGear {
  idTripOrder: String,
  wheelChocks: String,
  straps: String,
  userLoggedIn: String
}

input update_dynamic_tripOrder {
  idTripOrder: String,
  loadingDate: String,
  deliveryDate: String,
  sealNumber: String,
  temperature: String,
  proNumber: String,
  reference: String,
  isCrossing: String,
  idSalesFormatCrossing: String,
  containers: String,
  shippingLines: String,
  userLoggedIn: String,
  idClient: String,
  idSalesFormat: String,
}

input update_dynamic_tripOrder2 {
  idTripOrder: String,
  loadingDate: String,
  deliveryDate: String,
  sealNumber: String,
  temperature: String,
  proNumber: String,
  reference: String,
  isCrossing: String,
  containers: String,
  shippingLines: String,
  userLoggedIn: String,
  idClient: String,
  idSalesFormat: String,
}

input update_dynamic_travelAssignment {
  idTrip: String,
  idTripOrder: String,
  loadingDate: String,
  deliveryDate: String,
  sealNumber: String,
  temperature: String,
  proNumber: String,
  reference: String,
  isCrossing: String,
  userLoggedIn: String,
  idClient: String,
  idSalesFormat: String,
  idUnit: String,
	idTruckBox: String,
	idOperator: String
}

input update_dynamic_travelAssignmentCrossing {
  idTrip: String,
  idTripOrder: String,
  loadingDate: String,
  deliveryDate: String,
  sealNumber: String,
  temperature: String,
  proNumber: String,
  reference: String,
  userLoggedIn: String,
  idClient: String,
  idSalesFormat: String,
  idUnit: String,
	idTruckBox: String,
	idOperator: String
}

input update_dynamic_tripOrderCrossing {
  idTripOrder: String,
  loadingDate: String,
  deliveryDate: String,
  sealNumber: String,
  temperature: String,
  proNumber: String,
  reference: String,
  containers: String,
  shippingLines: String,
  userLoggedIn: String,
  idClient: String,
  idSalesFormat: String,
}

input confirm_tripOrder {
  idTripOrder: String,
  userLoggedIn: String
}

input update_tripOrder_SalesFormatCrossing {
  idTripOrder: String,
  idSalesFormatCrossing: String,
  userLoggedIn: String

}

input delete_tripOrder_product {
  idTripOrderProduct: String,
  userLoggedIn: String
}

input update_travelAssignment_tripCrossing {
  idTripOrder: String,
  idTripCrossing: String,
  numTripOrigin: String,
  userLoggedIn: String
}

input ser_orderOrigin_for_crossing {
  idTripOrderCrossing: String,
  idTripOrder: String,
  numTripOrder: String,
  userLoggedIn: String
}

input new_tripOrderCrossing {
    userLoggedIn: String,
    idEnterprise: String,
    idTrip: String
}

type return_new_tripOrderCrossing {
    idTripOrder: String,
    message: String
}

input new_tripOrderCrossingFromTripOrder {
    userLoggedIn: String,
    idEnterprise: String,
    idTripOrderOrigin: String
}

input update_tripOrderAmounts {
  idTripOrderAmounts: String
  idInvoicingConcept: String
  invoicingConcept: String
  subtotal: String
  idIVApercentage: String
  IVApercentage: String
  IVA: String
  idRETpercentage: String
  RETpercentage: String
  RET: String
  totalAmount: String
  idSalesFormat: String
  codeMeasuringUnit: String
  measuringUnit: String
  userLoggedIn: String
  status: String
  idTripOrder : String
  taxRate: String
}

input delete_tripOrderAmounts_by_idTripOrder {
  idTripOrder: String,
  userLoggedIn: String
}

type Mutation {
  CREATE_TRIPORDER(input: new_tripOrder): String
  CREATE_TRIPORDER_CROSSING(input: new_tripOrder): String
  UPDATE_ORDER_PRIORITY(input: new_orderPriority): String
  UPDATE_TRIPORDER_SALESFORMATCROSSING(input: update_tripOrder_SalesFormatCrossing): String
  DELETE_ORDER_PRIORITY(input: delete_tripOrder): String
  UPDATE_CUSTOMSCLEARNCE(input: update_customsClearance_tripOrder): [customsClearanceMessage]
  SET_CLIENT_TRIPORDER(input: set_client_tripOrder): String
  SET_SALEFORMAT_TRIPORDER(input: set_salesFormat_tripOrder): String
  UPDATE_TRIPORDER_MOORINGGEAR(input: update_tripOrder_mooringGear): String
  UPDATE_DYNAMIC_TRIPORDER(input: update_dynamic_tripOrder): String
  UPDATE_DYNAMIC_TRIPORDER2(input: update_dynamic_tripOrder2): String
  UPDATE_DYNAMIC_TRAVELASSIGNMENT_TRIPORDER(input: update_dynamic_travelAssignment): String
  UPDATE_DYNAMIC_TRAVELASSIGNMENT_TRIPORDERCROSSING(input: update_dynamic_travelAssignmentCrossing): String
  UPDATE_DYNAMIC_TRAVELASSIGNMENT_TRIPCROSSING(input: update_dynamic_travelAssignmentCrossing): String
  UPDATE_DYNAMIC_TRAVELASSIGNMENT_TRIP(input: update_dynamic_travelAssignment): String
  UPDATE_DYNAMIC_TRIPORDERCROSSING(input: update_dynamic_tripOrderCrossing): String
  CONFIRM_TRIPORDER(input: confirm_tripOrder): [responseConfirmTripOrder]
  DELETE_TRIPORDER_PRODUCT(input: delete_tripOrder_product): String
  UPDATE_TRAVEL_ASSIGNMENT_TRIPCROSSING(input: update_travelAssignment_tripCrossing): String
  CREATE_TRIP_ORDER_CROSSING_FROM_TRAVEL_ASIGNMENT(input: new_tripOrderCrossing): [return_new_tripOrderCrossing]
  CREATE_TRIP_ORDER_CROSSING_FROM_TRIP_ORDER(input: new_tripOrderCrossingFromTripOrder): [return_new_tripOrderCrossing]

  UPDATE_TRIP_ORDER_AMOUNTS(input: update_tripOrderAmounts): String
  DELETE_TRIP_ORDER_AMOUNTS_BY_ID_TRIP_ORDER(input: delete_tripOrderAmounts_by_idTripOrder): String
  SET_ORDER_ORIGIN_FOR_CROSSING(input: ser_orderOrigin_for_crossing): String
}